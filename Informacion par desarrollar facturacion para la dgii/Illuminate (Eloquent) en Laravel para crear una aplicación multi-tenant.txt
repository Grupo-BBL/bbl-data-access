¡Entendido! Te explicaré cómo usar Illuminate (Eloquent) en Laravel para crear una aplicación multi-tenant donde cada organización (cliente tuyo) tenga su propia base de datos independiente, mientras mantienes un núcleo unificado (como una base de datos central para contribuyentes/RNC). Esto es ideal para separar datos sensibles por cliente, pero compartir información común como los RNC de la DGII. Lo haré paso a paso para alguien nuevo en Illuminate, y luego te daré un ejemplo práctico con código.

---

### Explicación: Aplicación Multi-Tenant con Illuminate

#### ¿Qué es Multi-Tenancy?
En una aplicación multi-tenant (multi-inquilino), cada cliente (o "tenant") tiene sus propios datos aislados, pero todos comparten la misma aplicación. En tu caso:
- Cada organización tiene su propia base de datos (por ejemplo, tenant_organizacion1, tenant_organizacion2).
- Hay una base de datos "core" unificada (por ejemplo, core_db) que almacena datos compartidos, como los RNC de contribuyentes.

#### ¿Cómo lo hace Illuminate?
Illuminate/Eloquent permite manejar múltiples conexiones a bases de datos dinámicamente. La idea es:
1. Tener una base de datos central (core_db) para datos compartidos y para identificar a los tenants.
2. Configurar conexiones dinámicas a las bases de datos de los tenants según la organización que accede.
3. Usar modelos para interactuar con ambas: el núcleo unificado y la base de datos específica del tenant.

---

### Paso a Paso: Configuración Multi-Tenant

#### 1. Estructura de Bases de Datos
- **core_db**: Base de datos central con tablas como:
  - tenants: Lista de organizaciones (ID, nombre, slug, detalles de la base de datos).
  - contribuyentes: Datos compartidos (RNC, nombre, etc.).
- **tenant_***: Bases de datos por organización (por ejemplo, tenant_org1, tenant_org2), cada una con tablas como facturas, clientes, etc.

#### 2. Configurar la Base de Datos Central
Edita src/.env para incluir la conexión central:


DB_CONNECTION=core
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=core_db
DB_USERNAME=root
DB_PASSWORD=


En src/config/database.php, define la conexión core como predeterminada:

php
<?php

return [
    'default' => env('DB_CONNECTION', 'core'),

    'connections' => [
        'core' => [
            'driver' => 'mysql',
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'core_db'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
        ],
        // Las conexiones de tenants se definirán dinámicamente
    ],
];


#### 3. Modelo y Tabla para Tenants
Crea un modelo Tenant en src/app/Models/Tenant.php para gestionar las organizaciones:

php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Tenant extends Model
{
    protected $connection = 'core'; // Siempre usa la base de datos central
    protected $table = 'tenants';
    protected $fillable = ['name', 'slug', 'database'];

    public function configure()
    {
        // Configura la conexión del tenant dinámicamente
        config([
            'database.connections.tenant' => [
                'driver' => 'mysql',
                'host' => env('DB_HOST', '127.0.0.1'),
                'port' => env('DB_PORT', '3306'),
                'database' => $this->database,
                'username' => env('DB_USERNAME', 'root'),
                'password' => env('DB_PASSWORD', ''),
                'charset' => 'utf8mb4',
                'collation' => 'utf8mb4_unicode_ci',
            ]
        ]);

        // Reconecta la conexión 'tenant'
        app('db')->purge('tenant');
        app('db')->reconnect('tenant');

        return $this;
    }
}


- *Explicación*: Este modelo almacena la info de cada tenant (como el nombre de su base de datos) y tiene un método configure() para establecer dinámicamente la conexión a su base de datos.

#### 4. Modelos para el Núcleo y los Tenants
- **Modelo Contribuyente (Núcleo Unificado):
php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Contribuyente extends Model
{
    protected $connection = 'core'; // Siempre en core_db
    protected $table = 'contribuyentes';
    protected $fillable = ['rnc', 'nombre'];
}


- **Modelo Factura (Específico del Tenant):
php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Factura extends Model
{
    protected $connection = 'tenant'; // Usa la conexión dinámica del tenant
    protected $table = 'facturas';
    protected $fillable = ['numero', 'monto', 'rnc_cliente'];
}


- *Explicación*: Contribuyente siempre usa core_db, mientras que Factura usa la conexión tenant, que cambia según la organización.

#### 5. Identificar al Tenant y Configurar la Conexión
Necesitas determinar qué tenant está accediendo (por ejemplo, por subdominio, URL o un ID). Aquí un ejemplo simple usando un slug en la URL (como org1.miapp.com o /org1/note.php):

En www/slim_bootstrap.php, ajusta para soportar multi-tenancy:

php
<?php

function getSlimApp($tenantSlug = null)
{
    static $app = null;
    if ($app === null) {
        $appRoot = dirname($_SERVER["DOCUMENT_ROOT"]);
        require $appRoot . '/src/vendor/autoload.php';
        $app = require_once $appRoot . '/src/bootstrap/app.php';
        $app->register(Illuminate\Database\DatabaseServiceProvider::class);
        $app->register(Illuminate\View\ViewServiceProvider::class);
        $app->boot();
    }

    if ($tenantSlug) {
        // Busca el tenant en core_db
        $tenant = App\Models\Tenant::where('slug', $tenantSlug)->firstOrFail();
        $tenant->configure(); // Configura la conexión del tenant
    }

    return $app;
}


#### 6. Uso en note.php
Modifica note.php para identificar al tenant:

php
<?php

require __DIR__ . '/slim_bootstrap.php';

// Supongamos que el slug viene de la URL (ejemplo: /org1/note.php)
$tenantSlug = isset($_GET['tenant']) ? $_GET['tenant'] : 'org1'; // Simplificado, ajusta según tu lógica
$app = getSlimApp($tenantSlug);

use App\Models\Factura;
use App\Models\Contribuyente;

// Datos del tenant (en su propia base de datos)
$factura = Factura::first();
echo "Factura del tenant: " . ($factura->monto ?? 'No encontrada') . "\n";

// Datos del núcleo (compartido)
$contribuyente = Contribuyente::where('rnc', $factura->rnc_cliente)->first();
echo "Contribuyente (core): " . ($contribuyente->nombre ?? 'No encontrado');


- *Explicación*: Si accedes como org1, usa tenant_org1 para Factura y core_db para Contribuyente.

---

### Script para Crear Bases de Datos y Tablas (Fase de Borrador)

Aquí tienes un script para configurar todo automáticamente sin migraciones:

#### setup_multi_tenant.php
php
<?php

require __DIR__ . '/slim_bootstrap.php';
$app = getSlimApp();

// Conectar al servidor MySQL
$mysql = new PDO('mysql:host=' . env('DB_HOST', '127.0.0.1') . ';port=' . env('DB_PORT', '3306'),
    env('DB_USERNAME', 'root'), env('DB_PASSWORD', ''));

// Crear base de datos central
$mysql->exec("CREATE DATABASE IF NOT EXISTS `core_db` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
echo "Base de datos 'core_db' creada.\n";

// Crear tablas en core_db
$coreDb = $app['db']->connection('core');
$coreDb->statement("
    CREATE TABLE IF NOT EXISTS tenants (
        id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        slug VARCHAR(50) UNIQUE NOT NULL,
        database VARCHAR(100) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    ) ENGINE=InnoDB
");
$coreDb->statement("
    CREATE TABLE IF NOT EXISTS contribuyentes (
        id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        rnc VARCHAR(11) UNIQUE NOT NULL,
        nombre VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    ) ENGINE=InnoDB
");

// Datos de prueba en core_db
$coreDb->table('tenants')->insert([
    ['name' => 'Organización 1', 'slug' => 'org1', 'database' => 'tenant_org1'],
    ['name' => 'Organización 2', 'slug' => 'org2', 'database' => 'tenant_org2'],
]);
$coreDb->table('contribuyentes')->insert([
    ['rnc' => '123456789', 'nombre' => 'Juan Pérez'],
    ['rnc' => '987654321', 'nombre' => 'María Gómez'],
]);

// Crear bases de datos de tenants y tablas
$tenants = $coreDb->table('tenants')->get();
foreach ($tenants as $tenant) {
    $mysql->exec("CREATE DATABASE IF NOT EXISTS `{$tenant->database}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
    echo "Base de datos '{$tenant->database}' creada.\n";

    // Configurar la conexión del tenant
    $tenantModel = new App\Models\Tenant(['slug' => $tenant->slug, 'database' => $tenant->database]);
    $tenantModel->configure();

    // Crear tabla facturas en el tenant
    $tenantDb = $app['db']->connection('tenant');
    $tenantDb->statement("
        CREATE TABLE IF NOT EXISTS facturas (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            numero VARCHAR(50) NOT NULL,
            monto DECIMAL(15,2) NOT NULL,
            rnc_cliente VARCHAR(11) NOT NULL,
            created_at TIMESTAMP NULL,
            updated_at TIMESTAMP NULL
        ) ENGINE=InnoDB
    ");
    $tenantDb->table('facturas')->insert([
        ['numero' => 'FAC-001', 'monto' => 1500.50, 'rnc_cliente' => '123456789'],
        ['numero' => 'FAC-002', 'monto' => 2300.75, 'rnc_cliente' => '987654321'],
    ]);
}

echo "Configuración multi-tenant completa.\n";


#### Uso
- Guarda en www/setup_multi_tenant.php.
- Visita http://localhost/mi-proyecto/setup_multi_tenant.php.
- Verifica con note.php usando ?tenant=org1 o ?tenant=org2.

---

### Para el Despliegue
1. Crea migraciones para core_db:
   bash
   php artisan make:migration create_tenants_table --database=core
   php artisan make:migration create_contribuyentes_table --database=core
   
2. Crea una migración para las tablas de tenants (aplicada dinámicamente por tenant).
3. Usa un script para iterar sobre los tenants y ejecutar migraciones en sus bases de datos.

---

### Resumen
- *Multi-Tenant*: Cada organización tiene su propia base de datos (tenant_*), configurada dinámicamente con $tenant->configure().
- *Core Unificado*: core_db almacena tenants y contribuyentes compartidos.
- *Script*: setup_multi_tenant.php crea todo en borrador.

¿Necesitas más detalles o ajustes?
