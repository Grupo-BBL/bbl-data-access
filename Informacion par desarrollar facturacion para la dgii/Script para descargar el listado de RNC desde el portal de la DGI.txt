/**
 * Script para descargar el listado de RNC desde el portal de la DGII
 * y guardarlo en la base de datos
 */
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { createReadStream } = require('fs');
const { createInterface } = require('readline');
const { supabase } = require('../config/supabase');
const { pipeline } = require('stream/promises');
const unzipper = require('unzipper');

// URL donde se encuentra el archivo de contribuyentes
const DGII_RNC_URL = 'https://dgii.gov.do/app/WebApps/Consultas/rnc/DGII_RNC.zip';
const DOWNLOAD_PATH = path.join(__dirname, '../../tmp');
const ZIP_FILE_PATH = path.join(DOWNLOAD_PATH, 'DGII_RNC.zip');
const EXTRACTED_DIR_PATH = path.join(DOWNLOAD_PATH, 'extracted');
const TXT_FILE_PATH = path.join(EXTRACTED_DIR_PATH, 'DGII_RNC.TXT');

// Asegurar que las carpetas existan
if (!fs.existsSync(DOWNLOAD_PATH)) {
  fs.mkdirSync(DOWNLOAD_PATH, { recursive: true });
}
if (!fs.existsSync(EXTRACTED_DIR_PATH)) {
  fs.mkdirSync(EXTRACTED_DIR_PATH, { recursive: true });
}

/**
 * Descarga el archivo ZIP desde la DGII
 */
async function downloadRncFile() {
  console.log('Descargando archivo de RNC desde la DGII...');
  
  try {
    const response = await axios({
      method: 'get',
      url: DGII_RNC_URL,
      responseType: 'stream'
    });

    const writer = fs.createWriteStream(ZIP_FILE_PATH);
    
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });
  } catch (error) {
    console.error('Error al descargar el archivo:', error.message);
    throw error;
  }
}

/**
 * Extrae el archivo ZIP descargado
 */
async function extractZipFile() {
  console.log('Extrayendo archivo ZIP...');
  
  try {
    const stream = fs.createReadStream(ZIP_FILE_PATH)
      .pipe(unzipper.Extract({ path: EXTRACTED_DIR_PATH }));
    
    return new Promise((resolve, reject) => {
      stream.on('close', resolve);
      stream.on('error', reject);
    });
  } catch (error) {
    console.error('Error al extraer el archivo ZIP:', error.message);
    throw error;
  }
}

/**
 * Procesa el archivo TXT y guarda los datos en la base de datos
 */
async function processRncFile() {
  console.log('Procesando archivo de RNC...');
  
  try {
    // Verificar que la tabla existe
    await createContribuyentesTableIfNotExists();
    
    // Truncar la tabla para limpiar los datos antiguos
    await clearContribuyentesTable();
    
    let count = 0;
    const batchSize = 1000;
    let batch = [];
    
    // Leer el archivo línea por línea
    const fileStream = createReadStream(TXT_FILE_PATH);
    const rl = createInterface({
      input: fileStream,
      crlfDelay: Infinity
    });
    
    for await (const line of rl) {
      // El formato del archivo es: RNC|Nombre|Tipo
      const parts = line.split('|');
      if (parts.length >= 3) {
        const rnc = parts[0].trim();
        const nombre = parts[1].trim();
        const tipo = parts[2].trim(); // 1 = Persona Física, 2 = Persona Jurídica
        
        batch.push({
          rnc,
          razon_social: nombre,
          tipo: tipo === '1' ? 'Física' : 'Jurídica',
          estado: 'activo'
        });
        
        count++;
        
        // Procesar en lotes para mejorar rendimiento
        if (batch.length >= batchSize) {
          await saveContribuyentesToDB(batch);
          batch = [];
          console.log(Procesados ${count} registros...);
        }
      }
    }
    
    // Guardar último lote si quedaron elementos
    if (batch.length > 0) {
      await saveContribuyentesToDB(batch);
    }
    
    console.log(Proceso completado. Total de registros procesados: ${count});
  } catch (error) {
    console.error('Error al procesar el archivo de RNC:', error.message);
    throw error;
  }
}

/**
 * Crea la tabla contribuyentes si no existe
 */
async function createContribuyentesTableIfNotExists() {
  try {
    const { error } = await supabase.rpc('create_contribuyentes_table_if_not_exists');
    
    if (error) {
      // Si la función RPC no existe, crear la tabla directamente
      const { error: sqlError } = await supabase.raw(`
        CREATE TABLE IF NOT EXISTS facturacion.contribuyentes (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          rnc VARCHAR(20) NOT NULL UNIQUE,
          razon_social VARCHAR(255) NOT NULL,
          nombre_comercial VARCHAR(255),
          tipo VARCHAR(20) NOT NULL, -- Física o Jurídica
          estado VARCHAR(20) NOT NULL DEFAULT 'activo',
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `);
      
      if (sqlError) {
        throw sqlError;
      }
    }
  } catch (error) {
    console.error('Error al crear la tabla de contribuyentes:', error.message);
    throw error;
  }
}

/**
 * Limpia la tabla contribuyentes para cargar datos frescos
 */
async function clearContribuyentesTable() {
  try {
    const { error } = await supabase
      .from('facturacion.contribuyentes')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Truco para hacer un DELETE sin WHERE
    
    if (error) {
      // Intenta con SQL directo si el método anterior falla
      const { error: sqlError } = await supabase.raw(`
        TRUNCATE TABLE facturacion.contribuyentes;
      `);
      
      if (sqlError) {
        throw sqlError;
      }
    }
  } catch (error) {
    console.error('Error al limpiar la tabla de contribuyentes:', error.message);
    throw error;
  }
}

/**
 * Guarda un lote de contribuyentes en la base de datos
 */
async function saveContribuyentesToDB(contribuyentes) {
  try {
    const { error } = await supabase
      .from('facturacion.contribuyentes')
      .insert(contribuyentes);
    
    if (error) {
      throw error;
    }
  } catch (error) {
    console.error('Error al guardar contribuyentes en la base de datos:', error.message);
    throw error;
  }
}

/**
 * Función principal
 */
async function main() {
  try {
    await downloadRncFile();
    await extractZipFile();
    await processRncFile();
    
    console.log('Actualización de RNC completada exitosamente.');
    
    // Opcional: limpiar archivos temporales
    // fs.unlinkSync(ZIP_FILE_PATH);
    // fs.unlinkSync(TXT_FILE_PATH);
  } catch (error) {
    console.error('Error en el proceso de actualización de RNC:', error);
    process.exit(1);
  }
}

// Ejecutar el script si es llamado directamente
if (require.main === module) {
  // Cargar variables de entorno
  require('dotenv').config({ path: path.join(__dirname, '../../../.env') });
  
  main();
}

module.exports = {
  downloadRncFile,
  extractZipFile,
  processRncFile,
  main
};
